[tox]
envlist = process_md_images, build_docs
skipsdist = true

[testenv]
# 共用的 Python 依赖可以放这里
deps =
    requests
    -r requirements.txt

[testenv:detect_changed_md]
allowlist_externals =
    bash
commands =
    bash -c 'echo "::group::Detect changed .md files"'
    # 打印 commit 范围
    bash -c "echo GITHUB_EVENT_BEFORE=${GITHUB_EVENT_BEFORE:-unset}"
    bash -c "echo GITHUB_SHA=${GITHUB_SHA:-unset}"

    # 确保拿到完整历史
    bash -c "git fetch --unshallow || true"
    bash -c "git fetch origin main || true"

    # 检测变更 .md 文件
    bash -c '
      if [ "$GITHUB_EVENT_BEFORE" = "0000000000000000000000000000000000000000" ] || [ -z "$GITHUB_EVENT_BEFORE" ]; then
        echo "⚠️  GITHUB_EVENT_BEFORE 无效，用 HEAD^ 作为对比基准"
        changed=$(git diff --name-only HEAD^ $GITHUB_SHA | grep "\.md$" || true)
      else
        echo "✅ 使用范围: $GITHUB_EVENT_BEFORE → $GITHUB_SHA"
        changed=$(git diff --name-only $GITHUB_EVENT_BEFORE $GITHUB_SHA | grep "\.md$" || true)
      fi
      echo "变更的 .md 文件:"
      echo "$changed"
      echo "$changed" > changed_md_files.txt
    '

    # 输出结果确认
    bash -c "echo '--- changed_md_files.txt 内容 ---'"
    bash -c "cat changed_md_files.txt || echo '⚠️ 没有检测到任何变更'"
    bash -c 'echo "::endgroup::"'


[testenv:process_md_images]
allowlist_externals =
    bash
description = 处理变更的 Markdown 图片并推送到 main
commands =
    bash -c '[ -s changed_md_files.txt ] && python ./scripts/process_md_images.py changed_md_files.txt || echo "No markdown changes found"'
    bash -c 'git config user.name "github-actions[bot]"'
    bash -c 'git config user.email "github-actions[bot]@users.noreply.github.com"'
    bash -c 'git add . && (git diff --cached --quiet || git commit -m "Auto-update local image paths for changed md files")'
    bash -c 'git push origin main'

[testenv:html]
allowlist_externals =
    bash
description = 构建 Sphinx 文档
commands =
    sphinx-build -b html ./homepage ./docs_build
    bash scripts/build_docs.sh

[testenv:pdf]
allowlist_externals =
    bash
description = 生成PDF文档
commands =
    bash scripts/generate_pdf.sh
